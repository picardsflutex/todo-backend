// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//ENUMs

enum Role {
  ADMIN
  MANAGER
  SEO
  USER
}

enum Status {
  TODO
  INPROGRESS
  DONE
}

enum ProjectRole {
  AUTHOR
  PROJECT_LEAD
  EXECUTOR
}

//Models

model User {
  id            Int                  @id @default(autoincrement())
  email         String               @unique
  password_hash String
  name          String?              @unique
  role          Role                 @default(USER)
  Comment       Comment[]
  projects      ProjectParticipant[]
  tasks         Task[]
}

model ProjectParticipant {
  id           Int         @id @default(autoincrement())
  project      Project     @relation(fields: [projectId], references: [id])
  projectId    Int
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  project_role ProjectRole
}

model Project {
  id                 Int                  @id @default(autoincrement())
  title              String
  description        String
  createdAt          DateTime             @default(now())
  status             Status               @default(TODO)
  tasks              Task[]
  ProjectParticipant ProjectParticipant[]
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime  @default(now())
  status      Status    @default(TODO)
  projects    Project?  @relation(fields: [projectId], references: [id])
  projectId   Int?
  comments    Comment[]
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
}

model Comment {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now())
  task        Task?    @relation(fields: [taskId], references: [id])
  taskId      Int?
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    Int?
}
